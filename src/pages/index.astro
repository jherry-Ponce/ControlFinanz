---
import Layout from '../layouts/Layout.astro';
import FinancialCard from '../components/FinancialCard.astro';
import SavingsGoalCard from '../components/SavingsGoalCard.astro';
import ExpenseTable from '../components/ExpenseTable.astro';
import DebtCard from '../components/DebtCard.astro';
import { mockIncomes, mockExpenses, mockSavingsGoals, mockDebts } from '../data/mockData';
import { 
  calculateTotalIncome, 
  calculateTotalExpenses, 
  calculateTotalSavings,
  calculateBalance,
  getExpensesByCategory
} from '../utils/calculations';

// Cálculos para el dashboard
const totalIncome = calculateTotalIncome(mockIncomes);
const totalExpenses = calculateTotalExpenses(mockExpenses);
const totalSavings = calculateTotalSavings(mockSavingsGoals);
const balance = calculateBalance(totalIncome, totalExpenses);

// Gastos por categoría para mostrar el más alto
const expensesByCategory = getExpensesByCategory(mockExpenses);
const topExpenseCategory = Object.entries(expensesByCategory)
  .sort(([,a], [,b]) => b - a)[0];

// Estadísticas de tendencias (simuladas)
const incomeGrowth = "+8.2%";
const expenseGrowth = "+3.1%";
const savingsGrowth = "+12.4%";
---

<Layout title="Dashboard - Control de Gastos">
  <div class="space-y-6">
    <!-- Título del Dashboard -->
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-2xl font-bold text-gray-900">Dashboard Financiero</h1>
        <p class="text-gray-600">Resumen de tu situación financiera personal</p>
      </div>
      <div class="text-right">
        <p class="text-sm text-gray-500">Último actualizado</p>
        <p class="text-sm font-medium text-gray-900">{new Date().toLocaleDateString('es-PE')}</p>
      </div>
    </div>

    <!-- Tarjetas de Resumen Financiero -->
    <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6">
      <FinancialCard
        title="Ingresos del Mes"
        amount={totalIncome}
        subtitle="Incluye sueldo y negocios"
        icon='<path d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>'
        colorScheme="success"
        trend="up"
        trendValue={incomeGrowth}
      />
      
      <FinancialCard
        title="Gastos del Mes"
        amount={totalExpenses}
        subtitle="Gastos fijos y variables"
        icon='<path d="M20 12H4"/>'
        colorScheme="danger"
        trend="up"
        trendValue={expenseGrowth}
      />
      
      <FinancialCard
        title="Balance Disponible"
        amount={balance}
        subtitle="Ingresos - Gastos"
        icon='<path d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"/>'
        colorScheme={balance >= 0 ? "success" : "danger"}
        trend={balance >= 0 ? "up" : "down"}
        trendValue={balance >= 0 ? "Superávit" : "Déficit"}
      />
      
      <FinancialCard
        title="Total Ahorros"
        amount={totalSavings}
        subtitle="Progreso hacia metas"
        icon='<path d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"/>'
        colorScheme="primary"
        trend="up"
        trendValue={savingsGrowth}
      />
    </div>

    <!-- Sección de Metas de Ahorro -->
    <div>
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-gray-900">Metas de Ahorro</h2>
        <a href="/ahorros" class="text-primary-600 hover:text-primary-700 font-medium">
          Ver todas →
        </a>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
        {mockSavingsGoals.slice(0, 3).map((goal) => (
          <SavingsGoalCard goal={goal} />
        ))}
      </div>
    </div>

    <!-- Grid de Gastos Recientes y Deudas -->
    <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
      <!-- Tabla de Gastos Recientes -->
      <div class="xl:col-span-2">
        <ExpenseTable expenses={mockExpenses} />
      </div>
      
      <!-- Deudas Pendientes -->
      <div>
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold text-gray-900">Deudas Pendientes</h3>
          <a href="/deudas" class="text-primary-600 hover:text-primary-700 font-medium">
            Ver todas →
          </a>
        </div>
        
        <div class="space-y-4">
          {mockDebts.slice(0, 2).map((debt) => (
            <DebtCard debt={debt} />
          ))}
        </div>
      </div>
    </div>

    <!-- Resumen de Categorías -->
    <div class="bg-white rounded-xl border border-gray-200 p-6">
      <h3 class="text-lg font-semibold text-gray-900 mb-4">Categoría con Mayor Gasto</h3>
      <div class="flex items-center justify-between">
        <div>
          <p class="text-2xl font-bold text-danger-600">
            {topExpenseCategory && new Intl.NumberFormat('es-PE', {
              style: 'currency',
              currency: 'PEN',
              minimumFractionDigits: 2,
            }).format(topExpenseCategory[1])}
          </p>
          <p class="text-gray-600">
            {topExpenseCategory && (() => {
              const categoryLabels = {
                food: 'Alimentación',
                transport: 'Transporte',
                entertainment: 'Entretenimiento',
                healthcare: 'Salud',
                education: 'Educación',
                utilities: 'Servicios',
                debt: 'Deudas',
                services: 'Servicios',
                other: 'Otros'
              };
              return categoryLabels[topExpenseCategory[0]] || topExpenseCategory[0];
            })()}
          </p>
        </div>
        <div class="text-right">
          <p class="text-sm text-gray-500">
            {((topExpenseCategory[1] / totalExpenses) * 100).toFixed(1)}% del total
          </p>
          <a href="/gastos" class="text-primary-600 hover:text-primary-700 text-sm font-medium">
            Gestionar gastos →
          </a>
        </div>
      </div>
    </div>
  </div>
</Layout>